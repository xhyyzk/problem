https://ac.nowcoder.com/acm/contest/894/B
给数组a, b,构造一个二维数组c[i][j]=a[i]*b[j],定义矩阵的权值为矩阵内各个元素的和，问c中有多少个矩阵的权值大于等于L且小于等于R。
可以预处理a，b的前缀和sum_a, sum_b,由c矩阵的构造方式可知若一个子矩阵的左上角为[x1,y1],右下角为[x2,y2],所以其权值为
(sum_a[x2] - sum_a[x1-1])*(sum_b[y2] - sum_b[y1-1])。所以可以处理出所有sum_b之间的差值，排序之后枚举x1,x2,再二分查找符合条件的y即可

代码：
#include<bits/stdc++.h>
using namespace std;
#define ll long long
const int maxn=1005;
int n,m,len;
ll a[maxn],b[maxn],c[maxn*maxn];
ll work(ll limit)
{
    ll id=0;
    int l=1,r=len;
    while(l<=r)
    {
        int mid=(l+r)/2;
        if(c[mid]<=limit)
            id=mid,l=mid+1;
        else
            r=mid-1;
    }
    return id;
}
ll cal(ll limit)
{
    ll ans=0;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=i;j++)
        {
            ll x=a[i]-a[j-1];
            ans+=work(limit/x);
        }
    }
    return ans;
}
int main()
{
    ll L,R;
    scanf("%d%d%lld%lld",&n,&m,&L,&R);
    for(int i=1,x;i<=n;i++)
    {
        scanf("%d",&x);
        a[i]=a[i-1]+x;
    }
    for(int i=1,x;i<=m;i++)
    {
        scanf("%d",&x);
        b[i]=b[i-1]+x;
        for(int j=1;j<=i;j++)
            c[++len]=b[i]-b[j-1];
    }
    sort(c+1,c+len+1);
    printf("%lld\n",cal(R)-cal(L-1));
    return 0;
}


