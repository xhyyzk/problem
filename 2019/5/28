https://nanti.jisuanke.com/t/39279
一串数，可以进行两个操作；1时把前一半和后一半交换，奇数的话中间的数不变，2是偶数位上的数和前一位数交换，问一共出现多少种不同的序列。
注：只要有一个位置不同就算不同
打表找规律

代码：
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 3e5 + 10;
typedef long long ll;
const int mod = 332748118;
const double pi = acos(-1);
string s;
map<string, int>mp;

int main() {
    /*while(cin >> s) {
        int n = s.length();
        mp[s] = 1;
        int cnt = 1;
        while(1) {
            if(n % 2 == 1) {
                for(int i = 1; i <= n - 2; i += 2) swap(s[i - 1], s[i]);
                if(mp[s] == 1) break;
                else {
                    //cout << s << endl;
                    mp[s] = 1;
                    cnt++;
                }
                for(int i = 0; i <= n / 2 - 1; ++i) swap(s[i], s[(n+1) / 2 + i]);
                if(mp[s] == 1) break;
                else {
                    //cout << s << endl;
                    mp[s] = 1;
                    cnt++;
                }
            }
            else {
                for(int i = 1; i <= n - 1; i += 2) swap(s[i - 1], s[i]);
                if(mp[s] == 1) break;
                else {
                    //cout << s << endl;
                    mp[s] = 1;
                    cnt++;
                }
                for(int i = 0; i <= n / 2 - 1; ++i) swap(s[i], s[n / 2 + i]);
                if(mp[s] == 1) break;
                else {
                    //cout << s << endl;
                    mp[s] = 1;
                    cnt++;
                }
            }
        }
        cout << cnt << endl;
    }
    return 0;*/
    int n;
    cin >> n;
    if(n % 4 == 0) cout << 4 << endl;
    else if(n % 4 == 1) {
        if(n == 1) cout << 1 << endl;
        else cout << 2 * n << endl;
    }
    else if(n % 4 == 2) cout << n << endl;
    else if(n % 4 == 3) {
        if(n == 3) cout << 6 << endl;
        else cout << 12 << endl;
    }
    return 0;
}



https://codeforces.com/contest/1169/problem/C
有n个数，在1到m-1之间，每次可以选任意多个数使之变为((a[i]+1)%m),为最少进过多少次操作可以使之变为不减序列
因为可知最多进行m次，所以可以二分答案。

代码：
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 3e5 + 10;
typedef long long ll;
const int mod = 332748118;
int n, m;
int a[MAXN];

bool check(int mid) {
    int pre = 0;
    for(int i = 1; i <= n; ++i) {
        if(a[i] + mid < pre) return false;
        if(a[i] > pre) {
            if((a[i] + mid) % m >= pre && a[i] + mid >= m) //只有a[i]+mid>=m才有可能使数变小
                continue;
            else pre = a[i];
        }
    }
    return true;
}

int main() {
    cin >> n >> m;
    for(int i = 1; i <= n; ++i) cin >> a[i];
    int l = 0, r = m;
    int res = 0;
    while(l <= r) {
        int mid = (l + r) >> 1;
        if(check(mid)) {
            r = mid - 1;
            res = mid;
        }
        else l = mid + 1;
    }
    cout << res << endl;
    return 0;
}



https://nanti.jisuanke.com/t/39270
简单几何题

代码：
#include <bits/stdc++.h>
using namespace std;
const int MAXN = 3e5 + 10;
typedef long long ll;
const int mod = 332748118;
const double pi = acos(-1);
int t;
double rx, ry, r, x, y;

double dis_(double x1, double y1, double x2, double y2) {
    return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}

double min_(double a, double b) {
    if(a < b) return a;
    else return b;
}

double max_(double a, double b) {
    if(a < b) return a;
    else return b;
}

int main() {
    scanf("%d", &t);
    while(t--) {
        scanf("%lf%lf%lf%lf%lf", &rx, &ry, &r, &x, &y);
        double x1 = rx + r;
        double x2 = rx - r;
        double dd = min(dis_(x1, ry, x, y), dis_(x2, ry, x, y)) + pi * r / 2;
        double d = dis_(x, y, rx, ry);
        double c = 2 * pi * r;
        double dis = sqrt(d * d - r * r);
        double a1 = pi - acos(r/d) - acos((y - ry)/d);
        double a2 = pi - acos(r/d) + acos((y - ry)/d);
        //printf("%.4lf %.4lf\n", a1, a2);
        if(min(a1, a2) < pi / 2) {
            double a = max(a1, a2);
            printf("%.4lf\n", min(dd, a * r + dis));
        }
        else printf("%.4lf\n", r * min(a1, a2) + dis);
    }
    return 0;
}
