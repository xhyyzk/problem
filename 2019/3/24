PTA 玩转二叉树
给出以一棵二叉树的节点个数，再给出其中序和前序遍历。
然后先做一个镜面反转 ， 输出反转后的层序遍历序列
/*input
  7
  1 2 3 4 5 6 7
  4 1 3 2 6 5 7*/
output
4 6 1 7 5 3 2

#include<bits/stdc++.h>
using namespace std;
const int MAXN = 1e4 +10;
const int inf = 0x3f3f3f3f;
int n;
int pre[1100] , in[1100] , l[1100] , r[1100];

int build(int rt , int start , int end) {
    if(start > end) return 0;
    int s = pre[rt];
    int i = start;
    while(i < end && in[i] != pre[rt]) i++;
    l[s] = build(rt + 1 , start , i - 1);
    r[s] = build(rt + 1 + i - start , i + 1 , end);
    return s;
}

int print(int s) {
    queue<int>q;
    q.push(s);
    while(!q.empty()) {
        int a = q.front();
        q.pop();
        if(a != s) printf(" ");
        printf("%d" , a);
        if(r[a]) q.push(r[a]);
        if(l[a]) q.push(l[a]);
    }
    printf("\n");
}

int main() {
    cin >> n;
    for(int i = 0 ; i < n ; i++) cin >> in[i];
    for(int i = 0 ; i < n ; i++) cin >> pre[i];
    build(0 , 0 , n - 1);
    print(pre[0]);
    return 0;
}
