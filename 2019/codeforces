https://codeforces.com/contest/1182/problem/E
可以把式子写成 f(n)=c^C(n)*f1^F1(n) * f2^F2(n) * f3^F3(n)
且：
F1(n)=F1(n-1)+F1(n-2)+F1(n-3)
F2(n)=F2(n-1)+F2(n-2)+F2(n-3)
F3(n)=F3(n-1)+F3(n-2)+F3(n-3)
C(n)=C(n-1）+C(n-2)+C(n-3)+2*n-6
由此可以得出F函数的矩阵（详见main函数）
可令：
G(n)=2*n-6=G(n-1)+2;
所以：
C(n)=C(n-1）+C(n-2)+C(n-3)+G(n)
由此可得C的矩阵
用矩阵加速和欧拉降幂即可

代码：
#include <bits/stdc++.h>
using namespace std;
typedef long long LL;
const int maxn = 1e6 + 5;
const int MOD = 1e9 + 6;
const int mod = 1e9 + 7;
using namespace std;
 
long long qk(long long a, long long n) {
    long long ans = 1;
    while (n) {
        if (n & 1)ans = ans * a % mod;
        n >>= 1;
        a = a * a % mod;
    }
    return ans;
}
 
struct Matrix {
    int n;
    LL a[5][5];
 
    Matrix(int n) : n(n) {
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)a[i][j] = 0;
    }
 
};
 
Matrix operator*(Matrix A, Matrix B) {
    int n = A.n;
    Matrix res(n);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            for (int k = 0; k < n; k++) {
                res.a[i][j] += (LL) A.a[i][k] * B.a[k][j] % MOD;
                res.a[i][j] %= MOD;
            }
    return res;
}
 
Matrix operator^(Matrix A, long long b) {
    int n = A.n;
    Matrix res(n), base = A;
    for (int i = 0; i < n; i++)res.a[i][i] = 1;
    while (b) {
        if (b & 1)res = res * base;
        base = base * base;
        b >>= 1;
    }
    return res;
}
 
Matrix a(3), b(5);
 
int main() {
    long long n, f1, f2, f3, c;
    cin >> n >> f1 >> f2 >> f3 >> c;
    a.a[0][0] = 1;
    a.a[0][1] = 1;
    a.a[0][2] = 1;
    a.a[1][0] = 1;
    a.a[2][1] = 1; //F的矩阵
    b.a[0][0] = 1;
    b.a[0][1] = 1;
    b.a[0][2] = 1;
    b.a[0][3] = 1;
    b.a[1][0] = 1;
    b.a[2][1] = 1;
    b.a[3][3] = 1;
    b.a[3][4] = 1;
    b.a[4][4] = 1; //C的矩阵
    a = a ^ (n - 3);
    b = b ^ (n - 3);
    long long ans = 1;
    long long F1 = (a.a[0][2] ) % MOD;
    long long F2 = ( a.a[0][1] ) % MOD;
    long long F3 = (a.a[0][0] ) % MOD;
    ans = qk(f1, F1) * qk(f2, F2) % mod * qk(f3, F3) % mod;
    long long C = (b.a[0][3]*2 + b.a[0][4] * 2) % MOD;
    ans = ans * qk(c, C) % mod;
    cout << ans << endl;
}
